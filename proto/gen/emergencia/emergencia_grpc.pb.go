// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: emergencia.proto

package emergencia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServicioAsignacion_EnviarEmergencias_FullMethodName = "/emergencia.ServicioAsignacion/EnviarEmergencias"
)

// ServicioAsignacionClient is the client API for ServicioAsignacion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio: Cliente → Asignación
type ServicioAsignacionClient interface {
	EnviarEmergencias(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Emergencia, Vacio], error)
}

type servicioAsignacionClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioAsignacionClient(cc grpc.ClientConnInterface) ServicioAsignacionClient {
	return &servicioAsignacionClient{cc}
}

func (c *servicioAsignacionClient) EnviarEmergencias(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Emergencia, Vacio], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServicioAsignacion_ServiceDesc.Streams[0], ServicioAsignacion_EnviarEmergencias_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Emergencia, Vacio]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServicioAsignacion_EnviarEmergenciasClient = grpc.ClientStreamingClient[Emergencia, Vacio]

// ServicioAsignacionServer is the server API for ServicioAsignacion service.
// All implementations must embed UnimplementedServicioAsignacionServer
// for forward compatibility.
//
// Servicio: Cliente → Asignación
type ServicioAsignacionServer interface {
	EnviarEmergencias(grpc.ClientStreamingServer[Emergencia, Vacio]) error
	mustEmbedUnimplementedServicioAsignacionServer()
}

// UnimplementedServicioAsignacionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicioAsignacionServer struct{}

func (UnimplementedServicioAsignacionServer) EnviarEmergencias(grpc.ClientStreamingServer[Emergencia, Vacio]) error {
	return status.Errorf(codes.Unimplemented, "method EnviarEmergencias not implemented")
}
func (UnimplementedServicioAsignacionServer) mustEmbedUnimplementedServicioAsignacionServer() {}
func (UnimplementedServicioAsignacionServer) testEmbeddedByValue()                            {}

// UnsafeServicioAsignacionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioAsignacionServer will
// result in compilation errors.
type UnsafeServicioAsignacionServer interface {
	mustEmbedUnimplementedServicioAsignacionServer()
}

func RegisterServicioAsignacionServer(s grpc.ServiceRegistrar, srv ServicioAsignacionServer) {
	// If the following call pancis, it indicates UnimplementedServicioAsignacionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServicioAsignacion_ServiceDesc, srv)
}

func _ServicioAsignacion_EnviarEmergencias_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicioAsignacionServer).EnviarEmergencias(&grpc.GenericServerStream[Emergencia, Vacio]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServicioAsignacion_EnviarEmergenciasServer = grpc.ClientStreamingServer[Emergencia, Vacio]

// ServicioAsignacion_ServiceDesc is the grpc.ServiceDesc for ServicioAsignacion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioAsignacion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencia.ServicioAsignacion",
	HandlerType: (*ServicioAsignacionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnviarEmergencias",
			Handler:       _ServicioAsignacion_EnviarEmergencias_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "emergencia.proto",
}

const (
	ServicioMonitoreo_RecibirActualizaciones_FullMethodName = "/emergencia.ServicioMonitoreo/RecibirActualizaciones"
)

// ServicioMonitoreoClient is the client API for ServicioMonitoreo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio: Monitoreo → Cliente
type ServicioMonitoreoClient interface {
	RecibirActualizaciones(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EstadoEmergencia], error)
}

type servicioMonitoreoClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioMonitoreoClient(cc grpc.ClientConnInterface) ServicioMonitoreoClient {
	return &servicioMonitoreoClient{cc}
}

func (c *servicioMonitoreoClient) RecibirActualizaciones(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EstadoEmergencia], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServicioMonitoreo_ServiceDesc.Streams[0], ServicioMonitoreo_RecibirActualizaciones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Vacio, EstadoEmergencia]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServicioMonitoreo_RecibirActualizacionesClient = grpc.ServerStreamingClient[EstadoEmergencia]

// ServicioMonitoreoServer is the server API for ServicioMonitoreo service.
// All implementations must embed UnimplementedServicioMonitoreoServer
// for forward compatibility.
//
// Servicio: Monitoreo → Cliente
type ServicioMonitoreoServer interface {
	RecibirActualizaciones(*Vacio, grpc.ServerStreamingServer[EstadoEmergencia]) error
	mustEmbedUnimplementedServicioMonitoreoServer()
}

// UnimplementedServicioMonitoreoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicioMonitoreoServer struct{}

func (UnimplementedServicioMonitoreoServer) RecibirActualizaciones(*Vacio, grpc.ServerStreamingServer[EstadoEmergencia]) error {
	return status.Errorf(codes.Unimplemented, "method RecibirActualizaciones not implemented")
}
func (UnimplementedServicioMonitoreoServer) mustEmbedUnimplementedServicioMonitoreoServer() {}
func (UnimplementedServicioMonitoreoServer) testEmbeddedByValue()                           {}

// UnsafeServicioMonitoreoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioMonitoreoServer will
// result in compilation errors.
type UnsafeServicioMonitoreoServer interface {
	mustEmbedUnimplementedServicioMonitoreoServer()
}

func RegisterServicioMonitoreoServer(s grpc.ServiceRegistrar, srv ServicioMonitoreoServer) {
	// If the following call pancis, it indicates UnimplementedServicioMonitoreoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServicioMonitoreo_ServiceDesc, srv)
}

func _ServicioMonitoreo_RecibirActualizaciones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Vacio)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicioMonitoreoServer).RecibirActualizaciones(m, &grpc.GenericServerStream[Vacio, EstadoEmergencia]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServicioMonitoreo_RecibirActualizacionesServer = grpc.ServerStreamingServer[EstadoEmergencia]

// ServicioMonitoreo_ServiceDesc is the grpc.ServiceDesc for ServicioMonitoreo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioMonitoreo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencia.ServicioMonitoreo",
	HandlerType: (*ServicioMonitoreoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecibirActualizaciones",
			Handler:       _ServicioMonitoreo_RecibirActualizaciones_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "emergencia.proto",
}

const (
	ServicioDrones_AsignarEmergencia_FullMethodName = "/emergencia.ServicioDrones/AsignarEmergencia"
)

// ServicioDronesClient is the client API for ServicioDrones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio: Asignación → Drones
type ServicioDronesClient interface {
	AsignarEmergencia(ctx context.Context, in *Asignacion, opts ...grpc.CallOption) (*Vacio, error)
}

type servicioDronesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioDronesClient(cc grpc.ClientConnInterface) ServicioDronesClient {
	return &servicioDronesClient{cc}
}

func (c *servicioDronesClient) AsignarEmergencia(ctx context.Context, in *Asignacion, opts ...grpc.CallOption) (*Vacio, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vacio)
	err := c.cc.Invoke(ctx, ServicioDrones_AsignarEmergencia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicioDronesServer is the server API for ServicioDrones service.
// All implementations must embed UnimplementedServicioDronesServer
// for forward compatibility.
//
// Servicio: Asignación → Drones
type ServicioDronesServer interface {
	AsignarEmergencia(context.Context, *Asignacion) (*Vacio, error)
	mustEmbedUnimplementedServicioDronesServer()
}

// UnimplementedServicioDronesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicioDronesServer struct{}

func (UnimplementedServicioDronesServer) AsignarEmergencia(context.Context, *Asignacion) (*Vacio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsignarEmergencia not implemented")
}
func (UnimplementedServicioDronesServer) mustEmbedUnimplementedServicioDronesServer() {}
func (UnimplementedServicioDronesServer) testEmbeddedByValue()                        {}

// UnsafeServicioDronesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioDronesServer will
// result in compilation errors.
type UnsafeServicioDronesServer interface {
	mustEmbedUnimplementedServicioDronesServer()
}

func RegisterServicioDronesServer(s grpc.ServiceRegistrar, srv ServicioDronesServer) {
	// If the following call pancis, it indicates UnimplementedServicioDronesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServicioDrones_ServiceDesc, srv)
}

func _ServicioDrones_AsignarEmergencia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asignacion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioDronesServer).AsignarEmergencia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicioDrones_AsignarEmergencia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioDronesServer).AsignarEmergencia(ctx, req.(*Asignacion))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicioDrones_ServiceDesc is the grpc.ServiceDesc for ServicioDrones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicioDrones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencia.ServicioDrones",
	HandlerType: (*ServicioDronesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AsignarEmergencia",
			Handler:    _ServicioDrones_AsignarEmergencia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emergencia.proto",
}
